import React from 'react';
import { useState } from 'react';
import { Download, Edit, Trash2, Calendar, Tag, Star, CheckCircle, Target, Bot, Copy, AlertTriangle } from 'lucide-react';
import { Situation } from '../types';
import { frameworks } from '../data/frameworks';

interface ReflectionSummaryProps {
  reflection: Situation;
  onEdit?: () => void;
  onDelete?: () => void;
  onExport?: () => void;
}

export function ReflectionSummary({ reflection, onEdit, onDelete, onExport }: ReflectionSummaryProps) {
  const framework = frameworks[reflection.framework];
  const createdDate = new Date(reflection.createdAt).toLocaleDateString();
  const [showCopyToast, setShowCopyToast] = useState(false);

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'feedback': return 'from-blue-400 to-blue-600';
      case 'conflict': return 'from-red-400 to-red-600';
      case 'decision': return 'from-purple-400 to-purple-600';
      case 'stakeholder': return 'from-green-400 to-green-600';
      case 'team-dynamics': return 'from-orange-400 to-orange-600';
      case 'other': return 'from-gray-400 to-gray-600';
      default: return 'from-blue-400 to-blue-600';
    }
  };

  const getCategoryEmoji = (category: string) => {
    switch (category) {
      case 'feedback': return '💬';
      case 'conflict': return '🤝';
      case 'decision': return '🎯';
      case 'stakeholder': return '🌐';
      case 'team-dynamics': return '👥';
      case 'other': return '⚡';
      default: return '📝';
    }
  };

  const exportToPDF = () => {
    let content = `🚀 Leadership Reflection - ${framework.name}\n`;
    content += `📅 Created: ${createdDate}\n`;
    content += `📂 Category: ${getCategoryEmoji(reflection.category)} ${reflection.category}\n\n`;
    content += `📋 Framework: ${framework.name}\n`;
    content += `📝 Description: ${framework.description}\n\n`;
    content += `═══════════════════════════════════════\n\n`;
    
    framework.questions.forEach((question, index) => {
      const response = reflection.responses[question.id] || 'No response';
      content += `❓ Question ${index + 1}: ${question.text}\n`;
      content += `💭 Response: ${response}\n\n`;
    });

    content += `═══════════════════════════════════════\n`;
    content += `✨ Generated by Reflect & Act - Your Leadership Learning Companion\n`;
    content += `🔒 This reflection was created privately and securely on your device.`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `reflection-${reflection.id}-${createdDate.replace(/\//g, '-')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const copyForAI = async () => {
    const aiContent = `# Leadership Reflection Analysis Request

I'm sharing a leadership reflection from my private development tool "Reflect & Act" and would like your insights and analysis.

## Context
- **Date**: ${createdDate}
- **Category**: ${reflection.category} (${getCategoryEmoji(reflection.category)})
- **Framework Used**: ${framework.name}
- **Framework Purpose**: ${framework.description}

## My Reflection Responses

${framework.questions.map((question, index) => {
  const response = reflection.responses[question.id] || 'No response provided';
  return `### ${index + 1}. ${question.text}

**My Response:**
${response}
`;
}).join('\n')}

## What I'm Looking For

Please analyze my reflection and provide:

1. **Key Insights**: What patterns or themes do you notice in my responses?
2. **Blind Spots**: What important aspects might I have missed or not fully considered?
3. **Actionable Advice**: What specific next steps would you recommend?
4. **Leadership Growth**: How does this reflection show areas for my leadership development?
5. **Alternative Perspectives**: Are there other ways to view this situation?

Please be constructive and specific in your feedback. This reflection represents real leadership challenges I'm working through.`;

    try {
      await navigator.clipboard.writeText(aiContent);
      setShowCopyToast(true);
      setTimeout(() => setShowCopyToast(false), 8000);
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
    }
  };

  return (
    <div className="relative bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-all duration-200">
      {/* Copy Success Toast */}
      {showCopyToast && (
        <div className="absolute top-4 right-4 z-50 bg-emerald-600 text-white px-6 py-4 rounded-xl shadow-lg border border-emerald-500 animate-in slide-in-from-top-2 duration-500 max-w-md">
          <div className="flex items-start gap-3">
            <CheckCircle className="w-5 h-5 mt-0.5 flex-shrink-0" />
            <div>
              <div className="font-semibold mb-1">Copied to Clipboard! 📋</div>
              <div className="text-sm text-emerald-100">
                Your reflection is ready to paste into ChatGPT, Claude, or any AI assistant for analysis and insights.
              </div>
              <div className="mt-3 p-3 bg-amber-500 bg-opacity-20 rounded-lg border border-amber-400 border-opacity-30">
                <div className="flex items-start gap-2 mb-2">
                <AlertTriangle className="w-4 h-4 text-amber-200 mt-0.5 flex-shrink-0" />
                  <div className="text-xs text-amber-100 font-semibold">Privacy Notice:</div>
                </div>
                <div className="text-xs text-amber-100 leading-relaxed">
                  You're sharing personal leadership reflections. <strong>Consider using local LLMs (like Ollama) for maximum privacy</strong>, or only use trusted AI services and avoid sharing sensitive company information.
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Header */}
      <div className={`bg-gradient-to-r ${getCategoryColor(reflection.category)} text-white p-6`}>
        <div className="flex justify-between items-start mb-4">
          <div className="flex items-start gap-4">
            <div className="text-4xl">{getCategoryEmoji(reflection.category)}</div>
            <div>
              <h2 className="text-2xl font-semibold mb-2">
                {reflection.title || framework.name}
              </h2>
              <div className="flex items-center gap-4 text-sm text-white text-opacity-90">
                <div className="flex items-center gap-1">
                  <Calendar className="w-4 h-4" />
                  <span>{createdDate}</span>
                </div>
                <div className="flex items-center gap-1">
                  <Tag className="w-4 h-4" />
                  <span className="capitalize">{reflection.category}</span>
                </div>
              </div>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            {onEdit && (
              <button
                onClick={onEdit}
                className="p-3 bg-white bg-opacity-20 hover:bg-opacity-30 rounded-lg transition-all duration-200"
                title="Edit reflection"
              >
                <Edit className="w-4 h-4" />
              </button>
            )}
            <button
              onClick={copyForAI}
              className="flex items-center gap-2 px-4 py-3 bg-gradient-to-r from-purple-500 to-indigo-600 hover:from-purple-600 hover:to-indigo-700 rounded-lg transition-all duration-200 text-white font-medium shadow-sm hover:shadow-md"
              title="Copy reflection with AI instructions to clipboard"
            >
              <Bot className="w-4 h-4" />
              <span className="text-sm">Copy for AI</span>
            </button>
            <button
              onClick={exportToPDF}
              className="p-3 bg-white bg-opacity-20 hover:bg-opacity-30 rounded-lg transition-all duration-200"
              title="Export reflection"
            >
              <Download className="w-4 h-4" />
            </button>
            {onDelete && (
              <button
                onClick={onDelete}
                className="p-3 bg-white bg-opacity-20 hover:bg-opacity-30 rounded-lg transition-all duration-200"
                title="Delete reflection"
              >
                <Trash2 className="w-4 h-4" />
              </button>
            )}
          </div>
        </div>
        
        <div className="bg-white bg-opacity-20 backdrop-blur-sm p-4 rounded-xl">
          <p className="text-white text-sm">
            <strong>Framework:</strong> {framework.description}
          </p>
        </div>
      </div>

      {/* Content */}
      <div className="p-6 space-y-6">
        {framework.questions.map((question, index) => {
          const response = reflection.responses[question.id];
          if (!response?.trim()) return null;
          
          return (
            <div key={question.id} className="bg-gray-50 p-6 rounded-xl border-l-4 border-blue-500">
              <div className="flex items-start gap-4">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-full flex items-center justify-center text-white font-bold text-sm flex-shrink-0">
                  {index + 1}
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold text-gray-900 mb-3">
                    {question.text}
                  </h3>
                  <p className="text-gray-700 whitespace-pre-wrap leading-relaxed">
                    {response}
                  </p>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Footer */}
      <div className="px-6 py-4 bg-gray-50 border-t border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className={`flex items-center gap-2 px-3 py-1 rounded-full text-sm font-medium ${
              reflection.status === 'completed' 
                ? 'bg-green-100 text-green-800' 
                : 'bg-amber-100 text-amber-800'
            }`}>
              {reflection.status === 'completed' ? (
                <>
                  <CheckCircle className="w-4 h-4" />
                  Completed
                </>
              ) : (
                <>
                  <Target className="w-4 h-4" />
                  Draft
                </>
              )}
            </div>
            <div className="px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-xs font-medium">
              <Bot className="w-3 h-3 inline mr-1" />
              Copy for AI
            </div>
          </div>
          
          <span className="text-sm text-gray-500">
            Last updated: {new Date(reflection.updatedAt).toLocaleDateString()}
          </span>
        </div>
      </div>
    </div>
  );
}